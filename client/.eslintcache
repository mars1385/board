[{"C:\\xmehran\\Programming\\node\\board\\client\\src\\index.js":"1","C:\\xmehran\\Programming\\node\\board\\client\\src\\App.js":"2","C:\\xmehran\\Programming\\node\\board\\client\\src\\Utils\\setAuthHeader.js":"3","C:\\xmehran\\Programming\\node\\board\\client\\src\\Redux\\store.js":"4","C:\\xmehran\\Programming\\node\\board\\client\\src\\Redux\\user\\userActions.js":"5","C:\\xmehran\\Programming\\node\\board\\client\\src\\Components\\private-route\\PrivateRoute.js":"6","C:\\xmehran\\Programming\\node\\board\\client\\src\\Components\\header\\Header.js":"7","C:\\xmehran\\Programming\\node\\board\\client\\src\\Pages\\Home\\Home.js":"8","C:\\xmehran\\Programming\\node\\board\\client\\src\\Pages\\Register\\Register.js":"9","C:\\xmehran\\Programming\\node\\board\\client\\src\\Pages\\Login\\Login.js":"10","C:\\xmehran\\Programming\\node\\board\\client\\src\\Redux\\rootReducers.js":"11","C:\\xmehran\\Programming\\node\\board\\client\\src\\Redux\\type.js":"12","C:\\xmehran\\Programming\\node\\board\\client\\src\\Redux\\user\\userSelectors.js":"13","C:\\xmehran\\Programming\\node\\board\\client\\src\\Redux\\user\\userReducer.js":"14","C:\\xmehran\\Programming\\node\\board\\client\\src\\Components\\create-project\\CreateProject.js":"15","C:\\xmehran\\Programming\\node\\board\\client\\src\\Redux\\project\\projectActions.js":"16","C:\\xmehran\\Programming\\node\\board\\client\\src\\Redux\\project\\projectReducer.js":"17","C:\\xmehran\\Programming\\node\\board\\client\\src\\Pages\\Projects\\Projects.js":"18","C:\\xmehran\\Programming\\node\\board\\client\\src\\Components\\card\\ProjectCard.js":"19","C:\\xmehran\\Programming\\node\\board\\client\\src\\Redux\\project\\projectSelector.js":"20","C:\\xmehran\\Programming\\node\\board\\client\\src\\Pages\\Project\\Project.js":"21","C:\\xmehran\\Programming\\node\\board\\client\\src\\Redux\\tasks\\tasksReducer.js":"22","C:\\xmehran\\Programming\\node\\board\\client\\src\\Components\\create-task\\CreateTask.js":"23","C:\\xmehran\\Programming\\node\\board\\client\\src\\Redux\\tasks\\tasksActions.js":"24","C:\\xmehran\\Programming\\node\\board\\client\\src\\Redux\\tasks\\tasksSelector.js":"25","C:\\xmehran\\Programming\\node\\board\\client\\src\\Components\\update-task\\UpdateTask.js":"26","C:\\xmehran\\Programming\\node\\board\\client\\src\\Components\\invite-user\\InviteUser.js":"27","C:\\xmehran\\Programming\\node\\board\\client\\src\\Components\\invite-user\\InviteUserCard.js":"28","C:\\xmehran\\Programming\\node\\board\\client\\src\\Components\\edit-project\\EditProject.js":"29"},{"size":168,"mtime":1623072857316,"results":"30","hashOfConfig":"31"},{"size":1911,"mtime":1623059064180,"results":"32","hashOfConfig":"31"},{"size":356,"mtime":1612941158907,"results":"33","hashOfConfig":"31"},{"size":428,"mtime":1612939132713,"results":"34","hashOfConfig":"31"},{"size":1670,"mtime":1622905883985,"results":"35","hashOfConfig":"31"},{"size":636,"mtime":1614179926906,"results":"36","hashOfConfig":"31"},{"size":4247,"mtime":1623074308459,"results":"37","hashOfConfig":"31"},{"size":725,"mtime":1623074236527,"results":"38","hashOfConfig":"31"},{"size":5802,"mtime":1622901338889,"results":"39","hashOfConfig":"31"},{"size":4559,"mtime":1622901291216,"results":"40","hashOfConfig":"31"},{"size":370,"mtime":1614783120909,"results":"41","hashOfConfig":"31"},{"size":1226,"mtime":1622906171083,"results":"42","hashOfConfig":"31"},{"size":293,"mtime":1612943230601,"results":"43","hashOfConfig":"31"},{"size":743,"mtime":1613064073076,"results":"44","hashOfConfig":"31"},{"size":4111,"mtime":1622901756243,"results":"45","hashOfConfig":"31"},{"size":3769,"mtime":1623054695944,"results":"46","hashOfConfig":"31"},{"size":1551,"mtime":1623054459919,"results":"47","hashOfConfig":"31"},{"size":2380,"mtime":1622901853651,"results":"48","hashOfConfig":"31"},{"size":2109,"mtime":1623056975843,"results":"49","hashOfConfig":"31"},{"size":505,"mtime":1622910831420,"results":"50","hashOfConfig":"31"},{"size":6354,"mtime":1623058782871,"results":"51","hashOfConfig":"31"},{"size":613,"mtime":1614941006631,"results":"52","hashOfConfig":"31"},{"size":3524,"mtime":1614862942906,"results":"53","hashOfConfig":"31"},{"size":1273,"mtime":1615310347753,"results":"54","hashOfConfig":"31"},{"size":280,"mtime":1614782576060,"results":"55","hashOfConfig":"31"},{"size":2481,"mtime":1615311344189,"results":"56","hashOfConfig":"31"},{"size":3827,"mtime":1622914518022,"results":"57","hashOfConfig":"31"},{"size":3186,"mtime":1623054868724,"results":"58","hashOfConfig":"31"},{"size":4026,"mtime":1623057030178,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1sisg75",{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"64"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"64"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"64"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"64"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"64"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"C:\\xmehran\\Programming\\node\\board\\client\\src\\index.js",[],"C:\\xmehran\\Programming\\node\\board\\client\\src\\App.js",[],["124","125"],"C:\\xmehran\\Programming\\node\\board\\client\\src\\Utils\\setAuthHeader.js",[],"C:\\xmehran\\Programming\\node\\board\\client\\src\\Redux\\store.js",[],"C:\\xmehran\\Programming\\node\\board\\client\\src\\Redux\\user\\userActions.js",[],"C:\\xmehran\\Programming\\node\\board\\client\\src\\Components\\private-route\\PrivateRoute.js",[],"C:\\xmehran\\Programming\\node\\board\\client\\src\\Components\\header\\Header.js",[],"C:\\xmehran\\Programming\\node\\board\\client\\src\\Pages\\Home\\Home.js",["126","127"],"C:\\xmehran\\Programming\\node\\board\\client\\src\\Pages\\Register\\Register.js",["128"],"// ------------imports---------------\r\nimport React, { memo, useEffect } from 'react';\r\nimport { Container, Avatar, Typography, TextField, Button, makeStyles, Grid } from '@material-ui/core';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport { useForm } from 'react-hook-form';\r\n\r\nimport { registerUser } from '../../Redux/user/userActions';\r\nimport { selectCurrentUser, selectServerErrors } from '../../Redux/user/userSelectors';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\n// ------------end imports-----------\r\n\r\n// material ui style\r\nconst useStyles = makeStyles((theme) => ({\r\n  register: {\r\n    marginTop: theme.spacing(9),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '100%',\r\n    marginTop: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nconst Register = ({ history }) => {\r\n  // state\r\n  const { register, handleSubmit, errors, setError, clearErrors } = useForm();\r\n  const classes = useStyles();\r\n\r\n  const { currentUser, serverErrors } = useSelector(\r\n    createStructuredSelector({\r\n      currentUser: selectCurrentUser,\r\n      serverErrors: selectServerErrors,\r\n    })\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (serverErrors) {\r\n      serverErrors.forEach((err) => {\r\n        if (err.field) {\r\n          setError(err.field, {\r\n            message: err.message,\r\n          });\r\n        } else {\r\n          setError('email', {\r\n            message: err.message,\r\n          });\r\n        }\r\n      });\r\n    }\r\n  }, [serverErrors, setError]);\r\n\r\n  useEffect(() => {\r\n    if (currentUser) {\r\n      history.push('/projects');\r\n    }\r\n  }, [currentUser, history]);\r\n  const dispatch = useDispatch();\r\n\r\n  const onSubmit = (data) => {\r\n    if (data.confirmPassword === data.password) {\r\n      dispatch(\r\n        registerUser({\r\n          name: data.name,\r\n          email: data.email,\r\n          password: data.password,\r\n        })\r\n      );\r\n    } else {\r\n      setError('confirmPassword', {\r\n        type: 'validate',\r\n        message: 'Passwords Must be Match',\r\n      });\r\n    }\r\n  };\r\n  // jsx\r\n  return (\r\n    <Container component='main' maxWidth='xs'>\r\n      <div className={classes.register}>\r\n        <Avatar className={classes.avatar}>\r\n          <LockOutlinedIcon />\r\n        </Avatar>\r\n        <Typography component='h1' variant='h5'>\r\n          Register\r\n        </Typography>\r\n        <form className={classes.form} onSubmit={handleSubmit(onSubmit)}>\r\n          <Grid container spacing={1}>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant='outlined'\r\n                margin='normal'\r\n                fullWidth\r\n                id='name'\r\n                label='Name'\r\n                name='name'\r\n                autoComplete='name'\r\n                autoFocus\r\n                inputRef={register({ required: { value: true, message: 'Please add your Name' } })}\r\n              />\r\n              {errors.name && (\r\n                <Typography align='inherit' color='error' variant='subtitle1'>\r\n                  {errors.name.message}\r\n                </Typography>\r\n              )}\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant='outlined'\r\n                margin='normal'\r\n                fullWidth\r\n                id='email'\r\n                label='Email Address'\r\n                name='email'\r\n                type='email'\r\n                autoComplete='email'\r\n                inputRef={register({ required: { value: true, message: 'Please add a valid Email' } })}\r\n              />\r\n              {errors.email && (\r\n                <Typography align='inherit' color='error' variant='subtitle1'>\r\n                  {errors.email.message}\r\n                </Typography>\r\n              )}\r\n            </Grid>\r\n\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant='outlined'\r\n                margin='normal'\r\n                fullWidth\r\n                name='password'\r\n                label='Password'\r\n                type='password'\r\n                id='password'\r\n                autoComplete='current-password'\r\n                inputRef={register({\r\n                  required: {\r\n                    value: true,\r\n                    message: 'Please add a Password!( Password must be more than 6 character)',\r\n                  },\r\n                })}\r\n              />\r\n              {errors.password && (\r\n                <Typography align='inherit' color='error' variant='subtitle2'>\r\n                  {errors.password.message}\r\n                </Typography>\r\n              )}\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant='outlined'\r\n                margin='normal'\r\n                fullWidth\r\n                name='confirmPassword'\r\n                label='Confirm Password'\r\n                type='password'\r\n                id='confirmPassword'\r\n                inputRef={register({ required: { value: true, message: 'Please add password again' } })}\r\n              />\r\n              {errors.confirmPassword && (\r\n                <Typography align='inherit' color='error' variant='subtitle2'>\r\n                  {errors.confirmPassword.message}\r\n                </Typography>\r\n              )}\r\n            </Grid>\r\n\r\n            <Grid item xs={12}>\r\n              <Button type='submit' fullWidth variant='contained' color='primary' className={classes.submit}>\r\n                Register\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </form>\r\n      </div>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default memo(Register);\r\n","C:\\xmehran\\Programming\\node\\board\\client\\src\\Pages\\Login\\Login.js",[],"C:\\xmehran\\Programming\\node\\board\\client\\src\\Redux\\rootReducers.js",[],"C:\\xmehran\\Programming\\node\\board\\client\\src\\Redux\\type.js",[],"C:\\xmehran\\Programming\\node\\board\\client\\src\\Redux\\user\\userSelectors.js",[],"C:\\xmehran\\Programming\\node\\board\\client\\src\\Redux\\user\\userReducer.js",[],"C:\\xmehran\\Programming\\node\\board\\client\\src\\Components\\create-project\\CreateProject.js",["129","130"],"import React from 'react';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport { useForm } from 'react-hook-form';\r\nimport { withRouter } from 'react-router-dom';\r\nimport {\r\n  makeStyles,\r\n  Modal,\r\n  Backdrop,\r\n  Fade,\r\n  Fab,\r\n  Typography,\r\n  Button,\r\n  Container,\r\n  TextField,\r\n  Grid,\r\n} from '@material-ui/core';\r\nimport { useDispatch } from 'react-redux';\r\nimport { addProject } from '../../Redux/project/projectActions';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  modal: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  paper: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n  },\r\n}));\r\n\r\nconst CreateProject = ({ history }) => {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(false);\r\n  const { errors, register, handleSubmit } = useForm();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const handleOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const onSubmit = (data, event) => {\r\n    event.preventDefault();\r\n    dispatch(addProject({ title: data.title, description: data.description, history }));\r\n  };\r\n  return (\r\n    <div>\r\n      <Button\r\n        variant='contained'\r\n        size='medium'\r\n        color='secondary'\r\n        aria-label='add'\r\n        onClick={handleOpen}\r\n        startIcon={<SaveIcon />}>\r\n        Create Project\r\n      </Button>\r\n      <Modal\r\n        aria-labelledby='transition-modal-title'\r\n        aria-describedby='transition-modal-description'\r\n        className={classes.modal}\r\n        open={open}\r\n        onClose={handleClose}\r\n        closeAfterTransition\r\n        BackdropComponent={Backdrop}\r\n        BackdropProps={{\r\n          timeout: 500,\r\n        }}>\r\n        <Fade in={open}>\r\n          <Container component='main' maxWidth='sm' className={classes.paper}>\r\n            <Typography variant='h4'>Create Project</Typography>\r\n            <form className={classes.form} onSubmit={handleSubmit(onSubmit)}>\r\n              <Grid container spacing={1}>\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    variant='outlined'\r\n                    margin='normal'\r\n                    fullWidth\r\n                    id='title'\r\n                    label='Title'\r\n                    name='title'\r\n                    autoComplete='title'\r\n                    autoFocus\r\n                    inputRef={register({ required: true })}\r\n                  />\r\n                  {errors.title && (\r\n                    <Typography align='inherit' color='error' variant='subtitle2'>\r\n                      {'Please add a Title for project'}\r\n                    </Typography>\r\n                  )}\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    variant='outlined'\r\n                    margin='normal'\r\n                    fullWidth\r\n                    id='description'\r\n                    label='Description'\r\n                    name='description'\r\n                    autoComplete='description'\r\n                    inputRef={register({ required: true })}\r\n                  />\r\n                  {errors.description && (\r\n                    <Typography align='inherit' color='error' variant='subtitle2'>\r\n                      {'Please add a Description for project'}\r\n                    </Typography>\r\n                  )}\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <Button\r\n                    type='submit'\r\n                    fullWidth\r\n                    variant='contained'\r\n                    color='primary'\r\n                    startIcon={<SaveIcon />}\r\n                    className={classes.submit}>\r\n                    Create\r\n                  </Button>\r\n                </Grid>\r\n              </Grid>\r\n            </form>\r\n          </Container>\r\n        </Fade>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(CreateProject);\r\n","C:\\xmehran\\Programming\\node\\board\\client\\src\\Redux\\project\\projectActions.js",[],"C:\\xmehran\\Programming\\node\\board\\client\\src\\Redux\\project\\projectReducer.js",[],"C:\\xmehran\\Programming\\node\\board\\client\\src\\Pages\\Projects\\Projects.js",[],"C:\\xmehran\\Programming\\node\\board\\client\\src\\Components\\card\\ProjectCard.js",[],"C:\\xmehran\\Programming\\node\\board\\client\\src\\Redux\\project\\projectSelector.js",[],"C:\\xmehran\\Programming\\node\\board\\client\\src\\Pages\\Project\\Project.js",["131","132","133"],"import React from 'react';\r\nimport { getProject, clearProject, updateProject, getActivities } from '../../Redux/project/projectActions';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { selectProject, selectServerErrors, selectMembers } from '../../Redux/project/projectSelector';\r\nimport { selectTasks } from '../../Redux/tasks/tasksSelector';\r\nimport { selectCurrentUser } from '../../Redux/user/userSelectors';\r\nimport { getTasks, clearTasks } from '../../Redux/tasks/tasksActions';\r\nimport { getMember } from '../../Redux/project/projectActions';\r\nimport {\r\n  Container,\r\n  makeStyles,\r\n  Grid,\r\n  Typography,\r\n  Breadcrumbs,\r\n  Link,\r\n  Paper,\r\n  InputBase,\r\n  Button,\r\n  Avatar,\r\n  Box,\r\n  Divider,\r\n} from '@material-ui/core';\r\nimport ProjectCard from '../../Components/card/ProjectCard';\r\nimport CreateTask from '../../Components/create-task/CreateTask';\r\nimport UpdateTask from '../../Components/update-task/UpdateTask';\r\nimport InviteUserCard from '../../Components/invite-user/InviteUserCard';\r\nimport Gravatar from 'react-gravatar';\r\n\r\n// material ui style\r\nconst useStyles = makeStyles((theme) => ({\r\n  project: {\r\n    marginTop: theme.spacing(12),\r\n    padding: theme.spacing(4),\r\n  },\r\n  container: {\r\n    padding: 0,\r\n  },\r\n  link: {\r\n    cursor: 'pointer',\r\n  },\r\n  header: {\r\n    paddingBottom: theme.spacing(2),\r\n  },\r\n  title: {\r\n    margin: '8px 0 ',\r\n    display: 'flex',\r\n    justifyContent: 'space-between',\r\n  },\r\n  card: {\r\n    marginTop: 45,\r\n  },\r\n  avatars: {\r\n    display: 'flex',\r\n    justifyContent: 'flex-end',\r\n  },\r\n  small: {\r\n    width: theme.spacing(3),\r\n    height: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nconst Project = ({ history, match }) => {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n\r\n  const { currentProject, errors, currentTasks, currentUser, members } = useSelector(\r\n    createStructuredSelector({\r\n      currentProject: selectProject,\r\n      currentTasks: selectTasks,\r\n      errors: selectServerErrors,\r\n      currentUser: selectCurrentUser,\r\n      members: selectMembers,\r\n    })\r\n  );\r\n\r\n  const [notes, setNotes] = React.useState('');\r\n\r\n  React.useEffect(() => {\r\n    if (currentProject) {\r\n      dispatch(getTasks({ projectId: currentProject._id }));\r\n\r\n      dispatch(getActivities({ projectId: currentProject._id }));\r\n\r\n      dispatch(getMember({ projectId: currentProject._id }));\r\n\r\n      setNotes(currentProject.generalNote ? currentProject.generalNote : '');\r\n    }\r\n\r\n    return () => {\r\n      dispatch(clearTasks());\r\n    };\r\n  }, [dispatch, getTasks, currentProject]);\r\n\r\n  React.useEffect(() => {\r\n    dispatch(getProject({ history, projectId: match.params.projectId }));\r\n\r\n    return () => {\r\n      dispatch(clearProject());\r\n    };\r\n  }, [dispatch, history, match.params.projectId]);\r\n\r\n  const getBack = () => {\r\n    history.push('/projects');\r\n  };\r\n\r\n  const updateNote = () => {\r\n    if (currentProject) {\r\n      dispatch(updateProject({ data: { generalNote: notes }, projectId: currentProject._id }));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container component='main' className={classes.container}>\r\n      {currentProject && (\r\n        <div className={classes.project}>\r\n          <Grid container spacing={1}>\r\n            <Grid item xs={8}>\r\n              <Breadcrumbs aria-label='breadcrumb' className={classes.header}>\r\n                <Link color='inherit' variant='subtitle1' className={classes.link} onClick={getBack}>\r\n                  My Projects\r\n                </Link>\r\n                <Typography variant='subtitle1' color='textPrimary'>\r\n                  {currentProject.title}\r\n                </Typography>\r\n              </Breadcrumbs>\r\n            </Grid>\r\n\r\n            <Grid item xs={4}>\r\n              {members && (\r\n                <Box className={classes.avatars}>\r\n                  {members.map((member) => (\r\n                    <Avatar key={member} className={classes.small}>\r\n                      <Gravatar email={member} />\r\n                    </Avatar>\r\n                  ))}\r\n                </Box>\r\n              )}\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container spacing={1}>\r\n            <Grid item lg={9} md={8} sm={12} xs={12}>\r\n              <Box className={classes.title}>\r\n                <Typography color='textSecondary' variant='h6'>\r\n                  Tasks\r\n                </Typography>\r\n\r\n                <CreateTask projectId={currentProject._id} />\r\n              </Box>\r\n\r\n              {currentTasks && currentTasks.length > 0 ? (\r\n                currentTasks.map((task) => <UpdateTask key={task._id} task={task} />)\r\n              ) : (\r\n                <Paper elevation={1} className={classes.input}>\r\n                  <InputBase disabled placeholder='No Task Add!!!' fullWidth />\r\n                </Paper>\r\n              )}\r\n\r\n              <Typography color='textSecondary' className={classes.title} variant='h6'>\r\n                General Notes\r\n              </Typography>\r\n\r\n              <Paper elevation={1} className={classes.input} style={{ minHeight: 100 }}>\r\n                <InputBase\r\n                  placeholder='Note'\r\n                  fullWidth\r\n                  multiline\r\n                  onChange={(event) => {\r\n                    setNotes(event.target.value);\r\n                  }}\r\n                  value={notes}\r\n                />\r\n              </Paper>\r\n\r\n              <Button variant='contained' color='primary' onClick={updateNote} style={{ marginTop: 10 }}>\r\n                Save Notes\r\n              </Button>\r\n            </Grid>\r\n            <Grid item lg={3} md={4} sm={12} xs={12} className={classes.card}>\r\n              <ProjectCard\r\n                history={history}\r\n                key={currentProject._id}\r\n                title={currentProject.title}\r\n                description={currentProject.description}\r\n                projectId={currentProject._id}\r\n                creator={currentProject.owner}\r\n                userId={currentUser.id}\r\n              />\r\n              {currentProject.owner === currentUser.id && (\r\n                <InviteUserCard projectId={currentProject._id} history={history} />\r\n              )}\r\n            </Grid>\r\n          </Grid>\r\n        </div>\r\n      )}\r\n      <div></div>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Project;\r\n","C:\\xmehran\\Programming\\node\\board\\client\\src\\Redux\\tasks\\tasksReducer.js",[],"C:\\xmehran\\Programming\\node\\board\\client\\src\\Components\\create-task\\CreateTask.js",[],"C:\\xmehran\\Programming\\node\\board\\client\\src\\Redux\\tasks\\tasksActions.js",[],"C:\\xmehran\\Programming\\node\\board\\client\\src\\Redux\\tasks\\tasksSelector.js",[],"C:\\xmehran\\Programming\\node\\board\\client\\src\\Components\\update-task\\UpdateTask.js",["134"],"import React from 'react';\r\nimport { Paper, InputBase, Checkbox, makeStyles, withStyles, TableSortLabel } from '@material-ui/core';\r\nimport green from '@material-ui/core/colors/green';\r\nimport grey from '@material-ui/core/colors/grey';\r\nimport { useDispatch } from 'react-redux';\r\nimport { updateTask } from '../../Redux/tasks/tasksActions';\r\n// material ui style\r\nconst useStyles = makeStyles((theme) => ({\r\n  input: {\r\n    padding: theme.spacing(1),\r\n    marginBottom: 6,\r\n  },\r\n  form: {\r\n    width: '100%',\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  completed: {\r\n    color: grey[400],\r\n    textDecoration: 'line-through',\r\n  },\r\n}));\r\nconst GreenCheckbox = withStyles({\r\n  root: {\r\n    color: green[400],\r\n    '&$checked': {\r\n      color: green[600],\r\n    },\r\n  },\r\n  checked: {},\r\n})((props) => <Checkbox color='default' {...props} />);\r\n\r\nconst UpdateTask = ({ task }) => {\r\n  const classes = useStyles();\r\n  const [taskBody, setTaskBody] = React.useState(task.body);\r\n  const [status, setStatus] = React.useState(task.status);\r\n  const [error, setError] = React.useState(null);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const handelUpdateTask = (event) => {\r\n    if (taskBody === '') {\r\n      setError('error');\r\n    } else if (event.key === 'Enter' && taskBody !== '') {\r\n      dispatch(\r\n        updateTask({ updatedData: { body: taskBody, status }, taskId: task._id, projectId: task.project })\r\n      );\r\n    } else if (event.target.name === 'status' && taskBody !== '') {\r\n      setStatus((state) => !state);\r\n      dispatch(\r\n        updateTask({\r\n          updatedData: { body: taskBody, status: event.target.checked },\r\n          taskId: task._id,\r\n          projectId: task.project,\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  const onChange = (event) => {\r\n    setTaskBody(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <Paper elevation={1} className={classes.input}>\r\n      <InputBase\r\n        onKeyDown={(event) => handelUpdateTask(event)}\r\n        value={taskBody}\r\n        disabled={status ? true : false}\r\n        onChange={onChange}\r\n        className={status ? classes.completed : ''}\r\n        style={{ width: '92%' }}\r\n        placeholder={error && 'Task can not be empty'}\r\n        name='body'\r\n        id='body'\r\n      />\r\n      <GreenCheckbox\r\n        name='status'\r\n        checked={status}\r\n        onChange={(event) => {\r\n          handelUpdateTask(event);\r\n        }}\r\n        id='status'\r\n      />\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default UpdateTask;\r\n","C:\\xmehran\\Programming\\node\\board\\client\\src\\Components\\invite-user\\InviteUser.js",[],"C:\\xmehran\\Programming\\node\\board\\client\\src\\Components\\invite-user\\InviteUserCard.js",["135"],"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport {\r\n  makeStyles,\r\n  Card,\r\n  CardActions,\r\n  CardContent,\r\n  Button,\r\n  Typography,\r\n  TextField,\r\n  Grid,\r\n} from '@material-ui/core';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { invite } from '../../Redux/project/projectActions';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    marginTop: 10,\r\n    minWidth: 275,\r\n    height: 200,\r\n  },\r\n  email: {\r\n    marginBottom: 16,\r\n  },\r\n  title: {\r\n    paddingLeft: 35,\r\n  },\r\n  grid: {\r\n    textAlign: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  submit: {},\r\n});\r\n\r\nconst InviteUserCard = ({ projectId, history }) => {\r\n  const classes = useStyles();\r\n\r\n  // const { errors, register, handleSubmit } = useForm();\r\n  const [email, setEmail] = React.useState('');\r\n\r\n  const error = useSelector((state) => state.project.error);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const inviteUserHandler = () => {\r\n    dispatch(invite({ email: email, projectId, history }));\r\n  };\r\n  return (\r\n    <Card className={classes.root} variant='elevation'>\r\n      <CardContent>\r\n        <Typography variant='h6' className={classes.title} color='textPrimary'>\r\n          Invite User\r\n        </Typography>\r\n        <CardActions className={classes.email}>\r\n          {/* <form className={classes.form} onSubmit={handleSubmit(inviteUserHandler)}> */}\r\n          <Grid container spacing={1} className={classes.grid}>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant='outlined'\r\n                margin='normal'\r\n                fullWidth\r\n                id='email'\r\n                value={email}\r\n                size='small'\r\n                onChange={(e) => {\r\n                  setEmail(e.target.value);\r\n                }}\r\n                label='Email Address'\r\n                name='email'\r\n                autoComplete='Email Address'\r\n                autoFocus\r\n                // inputRef={register({ required: true })}\r\n              />\r\n            </Grid>\r\n            {error && (\r\n              <Grid item xs={12}>\r\n                <Typography align='inherit' color='error' variant='subtitle2'>\r\n                  {error[0].message}\r\n                </Typography>\r\n              </Grid>\r\n            )}\r\n            <Grid item xs={6}>\r\n              <Button\r\n                fullWidth\r\n                variant='outlined'\r\n                color='primary'\r\n                type='submit'\r\n                className={classes.add}\r\n                onClick={() => inviteUserHandler()}\r\n                endIcon={<SendIcon />}>\r\n                Invite\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n          {/* {errors.email && (\r\n              <Typography align='inherit' color='error' variant='subtitle2'>\r\n                {'Please Enter a Email'}\r\n              </Typography>\r\n            )} */}\r\n\r\n          {/* </form> */}\r\n        </CardActions>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nInviteUserCard.propTypes = {\r\n  projectId: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default InviteUserCard;\r\n","C:\\xmehran\\Programming\\node\\board\\client\\src\\Components\\edit-project\\EditProject.js",[],{"ruleId":"136","replacedBy":"137"},{"ruleId":"138","replacedBy":"139"},{"ruleId":"140","severity":1,"message":"141","line":3,"column":15,"nodeType":"142","messageId":"143","endLine":3,"endColumn":21},{"ruleId":"140","severity":1,"message":"144","line":3,"column":23,"nodeType":"142","messageId":"143","endLine":3,"endColumn":33},{"ruleId":"140","severity":1,"message":"145","line":33,"column":53,"nodeType":"142","messageId":"143","endLine":33,"endColumn":64},{"ruleId":"140","severity":1,"message":"146","line":2,"column":8,"nodeType":"142","messageId":"143","endLine":2,"endColumn":15},{"ruleId":"140","severity":1,"message":"147","line":11,"column":3,"nodeType":"142","messageId":"143","endLine":11,"endColumn":6},{"ruleId":"140","severity":1,"message":"148","line":22,"column":3,"nodeType":"142","messageId":"143","endLine":22,"endColumn":10},{"ruleId":"140","severity":1,"message":"149","line":67,"column":27,"nodeType":"142","messageId":"143","endLine":67,"endColumn":33},{"ruleId":"150","severity":1,"message":"151","line":93,"column":6,"nodeType":"152","endLine":93,"endColumn":42,"suggestions":"153"},{"ruleId":"140","severity":1,"message":"154","line":2,"column":62,"nodeType":"142","messageId":"143","endLine":2,"endColumn":76},{"ruleId":"140","severity":1,"message":"155","line":14,"column":10,"nodeType":"142","messageId":"143","endLine":14,"endColumn":17},"no-native-reassign",["156"],"no-negated-in-lhs",["157"],"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'Typography' is defined but never used.","'clearErrors' is assigned a value but never used.","'AddIcon' is defined but never used.","'Fab' is defined but never used.","'Divider' is defined but never used.","'errors' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has an unnecessary dependency: 'getTasks'. Either exclude it or remove the dependency array. Outer scope values like 'getTasks' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["158"],"'TableSortLabel' is defined but never used.","'useForm' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"159","fix":"160"},"Update the dependencies array to be: [dispatch, currentProject]",{"range":"161","text":"162"},[2589,2625],"[dispatch, currentProject]"]